openapi: 3.0.3
info:
  title: natsukashiimono Web API
  description: |-
    natsukashiimono(仮)のWEB API仕様書です。
  version: 1.4.1
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://petstore3.swagger.io/api/v3
tags:
  - name: user
    description: アカウント情報
  - name: content
    description: 懐かしいコンテンツ
  - name: request
    description: コンテンツリクエスト
  - name: score
    description: 評価
paths:
  /user:
    get:
      tags:
        - user
      summary: 自分のユーザー情報
      description: 自分のユーザー情報を取得します。rolesは権限の強い順にソートします。(Amazon Cognito) user,admin
      responses:
        '200':
          description: ユーザーの新規作成
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: string
                    example: '4b84c852-6627-4e90-88af-5475e0245870'
                  roles:
                    type: array
                    items:
                      type: string
                      example:
                        - 'admin'
                        - 'role'
        '403':
          description: アクセス権限がない
        '404':
          description: ユーザーが見つからない
      security:
        - tokenAuth: []
    patch:
      tags:
        - user
      summary: 自分のユーザー情報を更新
      description: 自分のユーザー情報を更新します。user,admin
      operationId: patchUser
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                age:
                  type: integer
                  example: 20
      responses:
        '200':
          description: ユーザーの情報の更新成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: string
                    example: '4b84c852-6627-4e90-88af-5475e0245870'
                  roles:
                    type: array
                    items:
                      type: string
                      example:
                        - 'admin'
                        - 'role'
                  age:
                    type: integer
                    example: 20
        '403':
          description: アクセス権限がない
        '404':
          description: ユーザーが見つからない
      security:
        - tokenAuth: []
  /signup:
    post:
      tags:
        - user
      summary: サインアップ
      description: ユーザーの新規作成を行います。(Amazon Cognito) guest
      operationId: signup
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: 'user1@example.com'
                password:
                  type: string
                  format: password
                  example: 'password'
      responses:
        '200':
          description: ユーザーの新規作成
          content:
            application/json:
              schema:
                type: object
                properties:
                  successed:
                    type: boolean
        '400':
          description: パラメータ不足
  /signin:
    post:
      tags:
        - user
      summary: サインイン
      description: ユーザーのサインインを行い、アクセストークンを取得します。(Amazon Cognito) user,admin
      operationId: signin
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: 'user1@example.com'
                password:
                  type: string
                  format: password
                  example: 'password'
      responses:
        '200':
          description: 認証成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    format: uuid
        '400':
          description: パラメータの不足
        '401':
          description: 認証失敗
  /signout:
    post:
      tags:
        - user
      summary: ログアウト
      description: ユーザーのサインアウトを行い、アクセストークンを無効にします。全デバイスすべてのアクセストークンが無効になります。(Amazon Cognito) user,admin
      responses:
        '200':
          description: ログアウト成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  successed:
                    type: boolean

        '403':
          description: 権限なし
      security:
        - tokenAuth: []
  /verify:
    post:
      tags:
        - user
      summary: 認証コード送信
      description: メールアドレスに対して送られる認証コードを送信します。これがないと正式にログインすることはできません。(Amazon Cognito) guest
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: 'user1@example.com'
                code:
                  type: string
                  example: '123456'
      responses:
        '200':
          description: 認証コード送信成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  verified:
                    type: boolean
        '400':
          description: パラメータの不足
  /resend:
    post:
      tags:
        - user
      summary: 認証コード要求
      description: メールアドレスに対して認証コードの送信を依頼します。(Amazon Cognito)
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: 'user1@example.com'
      responses:
        '200':
          description: 認証コード通知成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  sent:
                    type: boolean
        '400':
          description: パラメータの不足
  /request:
    get:
      tags:
        - request
      summary: コンテンツリクエスト取得
      description: コンテンツの投稿のリクエストの一覧が取得できます。admin
      operationId: getRequest
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  contents:
                    type: array
                    items:
                      $ref: '#/components/schemas/Content'
        '403':
          description: アクセス権限がない
      security:
        - tokenAuth: []
  /request/approve:
    post:
      tags:
        - request
      summary: リクエスト承認
      description: リクエストを承認することができます。admin
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                contentId:
                  type: integer
      responses:
        '200':
          description: 承認に成功
        '404':
          description: 承認待ちのリクエストが存在しない
        '403':
          description: アクセス権限がない
      security:
        - tokenAuth: []
  /request/decline:
    post:
      tags:
        - request
      summary: リクエスト却下
      description: リクエストを却下することができます。admin
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                contentId:
                  type: integer
      responses:
        '200':
          description: 却下に成功
        '404':
          description: 承認待ちのリクエストが存在しない
        '403':
          description: アクセス権限がない
      security:
        - tokenAuth: []
  /content:
    get:
      tags:
        - content
      summary: コンテンツ
      description: コンテンツの一覧が取得できます。guest
      operationId: getContent
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  contents:
                    type: array
                    items:
                      $ref: '#/components/schemas/Content'
    post:
      tags:
        - content
      summary: コンテンツ投稿
      description: コンテンツを投稿できます。guest
      operationId: postContent
      requestBody:
        description: コンテンツの内容
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                imageUrl:
                  type: string
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Content'
        '400':
          description: パラメータ不足
  /score:
    post:
      tags:
        - score
      summary: 評価投稿
      description: 評価を投稿できます。user
      operationId: postScore
      requestBody:
        description: 評価するコンテンツ
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                contentId:
                  type: integer
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Content'
        '400':
          description: パラメータ不足
        '403':
          description: 権限なし
      security:
        - tokenAuth: []

components:
  schemas:
    Content:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
          example: '懐かしいお菓子'
        description:
          type: string
          example: 'もう今は駄菓子屋に売ってないお菓子です。'
        imageUrl:
          type: string
          example: 'https://placehold.jp/150x150.png'
        score:
          type: integer
  securitySchemes:
    tokenAuth:
      type: 'apiKey'
      name: 'Authorization'
      in: 'header'
